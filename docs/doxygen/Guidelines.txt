/*©*****************************************************************************
*                                                                              *
* Friend Unifying Platform                                                     *
* ------------------------                                                     *
*                                                                              *
* Copyright 2014-2016 Friend Software Labs AS, all rights reserved.            *
* Hillevaagsveien 14, 4016 Stavanger, Norway                                   *
* Tel.: (+47) 40 72 96 56                                                      *
* Mail: info@friendos.com                                                      *
*                                                                              *
**©****************************************************************************/
/**
 * @file
 *
 * How to document your code
 *
 *
 * @author FL (Francois Lionet)
 * @date first pushed on 28/12/2016
 */


HOW TO GENERATE THE DOC
-----------------------
In a CLI, move to docs/doxygen, and run ./makeinternaldoc.sh
The HTML documentation will be generated in a FriendDocInternal sub-folder.
Process takes a couple of seconds on a machine with a SSD drive.
Note: ./makeopensourcedoc.sh is not yet implemented. It it is same as above.


GENERAL SYNTAX
--------------

LINKS TO WEB PAGES AND EMAIL ADDRESSES
Doxygen will automatically replace any URLs and mail addresses found in the
documentation by links (in HTML).
To manually specify link text, use the HTML 'a' tag:
<a href="linkURL">link text</a>
which will be automatically translated to other output formats by doxygen.

LINKS TO OTHER DOCUMENTED (or not) FILES
Links to files : all words that contain a dot (.) that is not the last character
in the word are considered to be file names. If the word is indeed the name of
a documented input file, a link will automatically be created to the documentation
of that file.

FOR MORE INFORMATION ON LINKS IN DOXYGEN
Please refer to https://www.stack.nl/~dimitri/doxygen/manual/autolink.html

EXCLUDING CODE WHEN IN DOXYGEN
The macro "DOXYGEN" will be defined when Doxygen is running. Use normal
#ifndef macros.

EXCLUDING SECTIONS FOR INTERNAL DOCUMENTATION
You can use the #define INTERNAL_DOCS as a normal C macro, it will be defined
when the internal documentation is generated.
You can also use the Doxygen command @internal that will only copy the next
paragraph if Doxygen is making the internal documentation (up to the next
"Doxygen empty" line (with just one * at the beginning).
/**
 * My super function
 *
 * @internal
 * Hogne I did it as you asked, here is how it works.. Let me explain in this
 * lengthy paragraph that only FriendUP can see what I think about it.
 * Your idea is crap/brilliant and I like/hate it.
 * here are my suggestions to make it über-cool...
 * Bla bla bla. :) :) :)
 *
 * This line will be included in normal documentation.
 *
... very simple.

FORMATTING YOUR DOCUMENTATION FROM THE SOURCE
Although I think that formatting of the documentation should not be done within
the code itself, you can include formatting commands, the same as the ones used
by Trello, and change the aspect of the code in the final documentation.
Underline, bold, make paragraph titles bigger, insert HTML etc. just like Trello.
It should be OK for every kind of doc generated by Doxygen yet inclusion of
HTML code might render the doc difficult to export in other formats, so please avoid.
Documentation of the syntax here:
http://daringfireball.net/projects/markdown/syntax

COMMENTING JAVASCRIPT
Doxygen is less good with Javascript. It works, yet it was not made specifically
for it. I had no time so far to use it for this purpose.
If you find something that is difficult to do, just tell me: we can use
FriendParser for this kind of things. For example, no C-like macros in Javascript,
and they are sometimes really cool for keeping blocks of code separated...
Like an experimental section of code beside a tested section, easy to
do in C, difficult in Javascript. When you want to switch from one to another you have to
uncomment one section and comment the other... boring...
FriendParser will solve that with commands when building Friend:
FP>IFDEF(variable)
FP>IFEQUAL(variable, value)
FP>IFNOTEQUAL(variable, value)
will allow you to cut code in the generated final version of any code.
I will insert FriendParser in the build process when I have time for it, and
when the commands are done.
I made a similar system at the end of the HTML5 runtime (big one!) and it was
_really_ cool to use.


FRIENDPARSER
------------
FriendParser contains several systems I would have loved to have at Clickteam
and that I can finally implement now.

    HOW DOES IT WORK?
    When pulling the code in the morning just run FriendParser.
    Syntax : ./friendparser -d -r
    Will scan all sources (couple of seconds) and extract the reports.
    You report will be in the form:
    friendlyreport-XX.txt, generate beside ./friendparser (currently at the root)

    Later if needed, I will run FriendParser before generating
    the final doc, it will output a copy of the sources the code in a temp
    directory, and run Doxygen on this copy.
    So we can pre-process the doc in a much simpler and customized way
    than what Doxygen provides if we want.

    FriendParser will also be a "Javascript preprocessor", it will parse
    your Javascript code and generate the code in the build/ folder (instead
    of just a copy). You will be able to exclude parts of code as in C with
    macro (like #ifdef and #endif). This feature is really cool for Javascript
    I miss it so much...

    EXAMPLE OF DOCUMENTED CODE AS I DO IT
    KEY: use your own style, but respect the way to do it...
    Please have a look at core/util/friendstring.c and core/util/friendstring.h
    You can (and should) keep your style of personal comments in files, don't change
    anything in the way you usually program. You will find yourself with habit
    using almost only Doxygen-compatible style comments after a while,
    and do two tasks at once. Therefore saving time.

    XXTODO - PERSONAL TODOs
    You can have you own semi-personal TODOs, that only you will see each day,
    as at the end of this file (these ones are not personal as you are reading
    it! :).
    Send time-messages to yourself only.
    Good at the end of the development of a large project with many authors
    that have little time like us, leaving code open (which might be dangerous)
    as they don't have time to finish properly it and have to go to another task.
    If you have to do that, leave yourself a message that the others won't see
    every day.
    >>> quicker for everyone at final pass before beta or release
    >>> others will not see you are such a procrastinator :)
    >>> Hogne and Thomas can get a report of the whole list of personal TODOs to
        have an idea of the remaining tasks and for who.
    Format : XXTODO where XX stands for the initials of the developer.
             XXYYTODO you can generate TODOs for several people in one go.
                      list of any size (not implemented)
             *TODO: will generate a TODO for everyone (not implemented).
    You will see FLTODO in my code. A line containing this will be extracted by
    FriendParser and pasted in a "TODO" section of my own report (and the ones
    who ask for it). Along with the name of the file and the position of the
    TODO in the file.
    The system does not interfere with Doxygen, you can still put normal TODO
    or TODO: or @TODO.
    Note: I will make FriendParser when detecting this kind of "normal" TODOs extract
    the initials of the author from the file Doxygen section and copy such a todo in
    his report.

    XX>DONE(date) - AUTOMATIC TASK DONE LIST GENERATION (not implemented)
    If your XX>TODO contains a task that you have to do, the simple action of
    transforming it directly into the code into FL>DONE (example for me),
    will add the line to an ordered list of task done in the report
    (starting when you want, I'll implement a personal "date of start" system
    for each developer).
    I can even put a counter and indicate the ratio between UNDO and DONE so that
    you have a global idea of your progress.
    Hogne and Thomas will be able to see this list and have a global idea of the
    progress (useful in stressing times).
    Not a lot of work (same routines as COMMAND, see later), and I think it would
    be useful.

    XX>YY - PERSONAL MESSAGES
    You can send a message to another developer (if the process of reading your
    report every morning or night is accepted, I can put an alert when the
    report is not empty for you, or automatically open an editor if new lines
    are added to the report compared to the previous version in the root directory).
    When you write code, and have a question that can wait a couple of days, using this
    system will a) ensure it arrives, b) prevent you from quitting your concentration
    like ... go to Friend Chat and loose time saying stupid things and get caught by
    a "Like" on Facebook, as it often happens to me as I have not much will at some
    moments of the day against that. I suspect it is the same for everyone at
    different levels. (I don't even imagine a day not having Facebook open or without
    notifications, it is a drug! :D)
    Syntax: XX>YY, XX is your name, YY is the name of the person you ask the question to.
    FriendParser will extract the line, and include it (with the file name it included
    in, and the position in the file) in the destination developer report.
    I will add ways to include paragraph in the copy, to avoid having to open
    the file for simple questions and gain time when answering (like quotes).
    The person who answers the question just have to integrate a YY>XX in the code
    itself with the answer, and the developer asking the question will be satisfied
    the next day.
    FL>* will put a message from me to everyone. (not implemented)
    FL>HTPSTW will send a message to me to Hogne, Pawel and Thomas. (not implemented)

    MACRO COMMANDS
    I will quickly integrate into FriendParser a system of macro commands.
    You will be able to give commands to FriendParser on what to include,
    how to format tabulations and spaces in a file (for Hogne) etc.
    Format: FP>COMMAND(parameters)
    End of command action (eventually): <FP

    List of commands I have in mind, please suggest new ones:

        FP>SETWATCHDOG(name, version) - Put a watch dog on this code.
        Every developer who uses it in the code (anywhere) will receive warnings if the
        version number changes (I will use the "name" to find the references).
        "name" can be anything, a function, a file etc...
        If you make crucial modifications in a core function that you suspect will
        have implications at other places, please use it, it may save a lot of hassle.
        All the people who have put a FP>OKWATCHDOG(sameName, version) will receive a
        message when the version number in the SETWATCHDOG is higher than the one
        in the OKWATCHDOG command, until they validate it by entring the same (or higher)
        version number in their code.
        Principle being : You change -> They get constant warnings until they
                          have validated that the new code works.
        This message will be sent to all the developers who's initials are listed
        in the Doxygen description of the file (important, as it can also change
        code of the other authors not directly related to the function).
        Please note that you can put such a watch dog for a whole file, if the
        content has completely changed and you want to be sure that all persons
        involved have really understood the new way of working. Just use:
        FP>SETWATCHDOG(filename.ext, version) with the exact file name.

        FP>FORMAT(tabs_or_spaces_before_beginning, tabs_or_spaces_before_remarks)
        for Hogne.


HOW TO CODE YOUR DOCUMENTATION WITHOUT REALIZING IT
---------------------------------------------------
Please note that you will find empty code sections to paste in your code for
easy documentation insertion in your code at the end of this file.

HEADERS
Just use the one on the top of this file. You can change what's between the first
and last line, but FriendParser will replace what's inside if it asked to do it
(it will be done for next open-source version certainly)...
If you don't want a specific file to be included in the "header replacement process"
just remove the copyright character in the first and last line (or the whole
header itself).

FILE DESCRIPTION
The format is the same as the one of this file.

/**
 * @file
 *
 * Short one-line description of the content of the file (its function in the system)
 *
 * This is a more complete description, a paragraph that can have as many lines
 * as you want. You want to describe in it the whole class (or system of functions
 * in C), and its intentions, contained in the file. This is the "how-to-use"
 * place of the group of functions. For example for The WebSocket handler, the
 * author (Pawel?) should put here all the necessary to understand and use it
 * easily, including links to code examples (or directories).
 *
 * @author PS (Pawel Stefansky)                                                 <<< list of authors, ordered, last author first
 * @author HT (Hogne TildStad)
 * @author TW (Thomas Wollburg)                                                 <<< person whho created the file
 * @date first pushed on xx/xx/xxxx                                             <<< please push the day you create the file, or change the date! (I know we can get that on GIT yet...)
 * @todo this is the place for public or internal documentation TODOs. Add FLTODO on the line and it will also be a personal TODO
 * @important you can use that too here as well as any Doxygen commands
 */

FUNCTIONS
Function documentation uses the Javadoc format of Doxygen.

/**
 * This is a title, it should be short                                          <<< and describe the function intention, not dot at the end, one line only
 *
 * This is a description text, it can be a paragraph of many lines.
 * Formatting is done automatically by Doxygen, and you can add some extra
 * formatting, like tables, as in Trello.
 * Do not go too much into detail if the function is obvious (time lost for you
 * AND the reader). But if there is something specific, or "ultra cool" don't
 * hesitate to say it. Signal exceptions, or eventual cases of predicted crashes:
 * what NOT to do, you may not be there in two years time.
 * PARAMETER LIST
 * Parameter list is essential, a good parameter list properly described saves
 * time. No capital at start of the description of a parameter.
 * @param at start of line, followed by the exact name of the
 * parameter in the function definition, if pointer, say it! with
 * "pointer to", of course there is a * yet it stays consistent and easier to read
 * as we are all lazy bastards up there.
 * RETURN VALUES
 * One line starting with @return for the general case, one line for each error
 * or specific values, last line eventually "general" error messages (like -1).
 * Don't comment too much obvious names! Obvious names are really cool for that!
 * Specially for error numbers, they should be descriptive enough so that you
 * don't have to open a doc file or the log file.
 * Example of such a parameter list...
 *
 * @param sb pointer to a already opened Sysbase.library                        <<< Doxygen will generate a link to Sysbase.library code (I hope :)
 * @param name pointer to the name of the library to open                       <<< use simple words
 * @param version version number of the library to open                         <<< stay consistent, use the same wording
 * @return void pointer to the newly opened library                             <<< consistency in words makes remembering easier (forced internal repeat when you read it, as in school!)
 * @return NULL if case of error (library name not found, version not found     <<< in case of "generic error return" like this one, please state the major cases when it happens
 * 		   or other errors)                                                     <<< Doxygen will work on this one, lines at higher tabs will be merged with the first one, clever Doxygen
 * @attention will bring the next paragraph to attention
 * @deprecated will make this function as deprecated and copy the paragraph
 *             following this command (like this line).
 *
 * @example filename.ext will include in the example section of this function
 *                       the code found in another file
 *
 */

In my personal case, when I code, I insert headers as soon as I know I'm not going
back to a group of routines, or eventually at night before closing if I was too deep
in my code... Even immediately (in the morning when I am awake :) or when
the function is complicated or still fuzzy in my head, it helps.
Because the information is still fresh in my mind, and most of all, my mind is
still focused on it: I will write more precise information, more "inside the thing".
I would be "less into it" after a meal, or the next day if I do not dive into it again.
This is why I suggest not to wait too long to write the function / file headers
if you can...
Even if you know you will have to change them later: Doxygen reports such errors as
inconsistencies between documentation parameters and function definitions and
I will copy them into your report with FriendParser later.
I really appreciate finding old good documentation in a code I forgot, it
give me an impression that I am kind of "serious", which is good for the moral,
specially when you know how messy I am usually. Moral-raising time bombs
are good for you!

STRUCTURES
.h files are included in the process. You can (and should) document each
member of a structure that needs to, for both internal and open-source
members... Here is an example, taken from friend_code.h
Members are described with inline Doxygen comments.
Doxygen inline comments start with ///<

/**
 * FriendCore instance data
 *
 * Preferably, the contents of this struct should                               <<< I copied the original comments from Hogne, description could be more detailed here
 * never be modified after the server has been started
 */
typedef struct FriendCoreInstance
{
	MinNode					node;				///< list of cores

	char 					fci_CoreID[ 32 ];	///< id of the core

	int 					epollfd;            ///< file descriptor for epoll
	Socket	 				* listenSocket; 	///< socket for incoming connections (HTTODO: Make this "socketS": We must be able to listen on multiple interfaces!)

	// "Private"
	//char                  *fci_Shutdown;      ///< ends all event loops
	BOOL                    fci_Shutdown;       ///< ends all event loops
	BOOL 					fci_Closed;			///< if FC quits, then its set to TRUE
	BOOL 					fci_SSLEnabled;		///< if ssl is enabled

	Hashmap* 				libraries;   		///< contains all loaded libraries. Key: library name.

	int 					fci_Port;			///< FL>PS ?                    <<< asking questions to Hogne,
	int 					fci_MaxPoll;		///< FL>PS ?                    <<< he may read them sometime! :D
	int 					fci_BufferSize;		///< FL>PS ?                    <<< basically, the best option is that

	int 					fci_SendPipe[ 2 ];	///< FL>PS ?                    <<< each developer comments his own code...
	int 					fci_RecvPipe[ 2 ];	///< FL>PS ?
	int						fci_ReadCorePipe, fci_WriteCorePipe;

	FThread					*fci_Thread;		///< FL>PS ?
	pthread_mutex_t      	listenMutex;

	WorkerManager			*fci_WorkerManager; ///< worker manager

} FriendCoreInstance;

#DEFINES
Same principle.

/**
 * Worker state enumeration
 */
enum {
	W_STATE_CREATED   = 1,				///< created yet not initialized
	W_STATE_RUNNING   = 2,				///< running
	W_STATE_WAITING   = 3,				///< waiting for message or mutex
	W_STATE_TO_REMOVE = 4,				///< has received interrupt message
	W_STATE_COMMAND_CALLED				///< waiting for response from message handler
};

FUNCTION DECLARATIONS
Do *not* comment function declarations in the .h, or extern in another .h,
Doxygen automatically links the .h and the .c declarations.

GLOBAL VARIABLES
Only comment the ones that are exported. The other ones are usually for the
file only, or the group of functions, for you, you don't need to comment them
(or internal only).

GENERAL NOTE ABOUT DOCUMENTING
In "internal" documentation mode, there will be no hidden members of structure
or functions in the doc. Some of them will not be documented (as not worth it)
but they will be listed. Please be free to document anything internally
that might help you or the rest of us later.


EMPTY DOCUMENTATION HEADERS TO PASTE IN YOUR CODE
-------------------------------------------------

INTERNAL FILE HEADER
/*©*****************************************************************************
*                                                                              *
* Friend Unifying Platform                                                     *
* ------------------------                                                     *
*                                                                              *
* Copyright 2014-2016 Friend Software Labs AS, all rights reserved.            *
* Hillevaagsveien 14, 4016 Stavanger, Norway                                   *
* Tel.: (+47) 40 72 96 56                                                      *
* Mail: info@friendos.com                                                      *
*                                                                              *
**©****************************************************************************/

OPEN-SOURCE FILE HEADER
/*©*****************************************************************************
*                                                                              *
* This file is part of FRIEND UNIFYING PLATFORM.                               *
*                                                                              *
* This program is free software: you can redistribute it and/or modify         *
* it under the terms of the GNU Affero General Public License as published by  *
* the Free Software Foundation, either version 3 of the License, or            *
* (at your option) any later version.                                          *
*                                                                              *
* This program is distributed in the hope that it will be useful,              *
* but WITHOUT ANY WARRANTY; without even the implied warranty of               *
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the                 *
* GNU Affero General Public License for more details.                          *
*                                                                              *
* You should have received a copy of the GNU Affero General Public License     *
* along with this program.  If not, see <http://www.gnu.org/licenses/>.        *
*                                                                              *
**©****************************************************************************/

FILE HEADER
/**
 * @file
 *
 * Title
 *
 * Description
 * paragraph
 *
 * @author XX (Author Name)
 * @date first pushed on ../../2017
 */

FUNCTION HEADER
/**
 * Title
 *
 * Description
 * paragraph
 *
 * @param xx parameter
 * @return void return value
 */

STRUCTURE HEADER
/**
 * Title
 *
 * Description
 * paragraph
 */

MY LIST OF PERSONAL TODOS FOR THE DOCUMENTATION AND FRIENDPARSER
----------------------------------------------------------------
FLTODO CLI parameter to generate for only one developer or a list
FLTODO config.txt file?
FLTODO extract name of current author from file Doxygen indications
FLTODO XX>* command
FLTODO XX>YYZZ command
FLTODO XXYYTODO command
FLTODO *TODO command
FLTODO FP>COMMAND(parameters) - FP>SETWATCHDOG(name, version), FP>OKWATCHDOG(name, version)
FLTODO FP>CUT(identifier), FP>PASTE(identifier), FP>FORMAT(xx, yy)
FLTODO FP>IFDEF(variable), FP>IFNDEF(variable), FP>IFEQUAL(variable, value), FP>IFNEQUAL(variable, value)
FLTODO FP>FORMAT(before, after)
FLTODO Change the format of commands to FP<COMMAND(Parameters): more consistency, command go to FriendParser and not from. End of block marked with >FP... much better!
FLTODO If above, change personal todos to: XXTODO or XXYYZZ<TODO
FLTODO Change personal messages to YY<XX or YYZZ<XX
FLTODO XX<DONE
